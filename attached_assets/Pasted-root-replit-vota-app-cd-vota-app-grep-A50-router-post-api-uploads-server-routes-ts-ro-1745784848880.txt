root@replit:~/vota-app# cd ~/vota-app
grep -A50 "router.post(\"/api/uploads\"" server/routes.ts
  router.post("/api/uploads", async (req, res) => {
    try {
      console.log("Video upload started, validating payload...");
      
      // Add size limit checks first
      if (req.body.videoData && typeof req.body.videoData === 'string') {
        const dataSize = req.body.videoData.length;
        const sizeInMB = Math.round((dataSize / (1024 * 1024)) * 100) / 100;
        console.log(`Video data size: ${sizeInMB} MB`);
        
        // Warn if video is very large
        if (dataSize > 20 * 1024 * 1024) { // Over 20MB
          console.warn(`Large video upload detected: ${sizeInMB}MB. This may cause performance issues.`);
        }
      }
      
      const { videoData, userId, metadata } = insertUserUploadSchema.parse({
        ...req.body,
        createdAt: new Date().toISOString(),
      });

      console.log(`Creating upload record for user ${userId}...`);
      
      // Create a user upload record - but don't store the full video in the DB
      // Just store a placeholder to prevent DB bloat
      const userUpload = await storage.createUserUpload({
        userId,
        videoData: "VIDEO_DATA_PROCESSED", // Don't store large video data in DB
        metadata: JSON.stringify({
          originalSize: videoData.length,
          uploadDate: new Date().toISOString(),
          deviceInfo: metadata && typeof metadata === 'object' ? metadata : {}
        })
      });
      
      // Set the processing status
      await storage.updateUserUpload(userUpload.id, {
        processingStatus: 'processing'
      });

      console.log(`Upload record created with ID ${userUpload.id}, starting face extraction...`);

      // Process the video for face extraction in background
      // First return success response to client
      res.status(200).json({
        message: "Video upload successful, processing started",
        uploadId: userUpload.id
      });
      
      // Then process in background (don't await)
      (async () => {
root@replit:~/vota-app# cd ~/vota-app
grep -r "ws:" server --include="*.js" --include="*.ts"
grep -r "wss:" server --include="*.js" --include="*.ts"
root@replit:~/vota-app# 